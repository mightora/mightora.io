# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.132.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch all history for .GitInfo and .Lastmod
          submodules: recursive
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Setup Hugo
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Process Markdown Includes
        run: |
          python3 .github/workflows/include_md.py .
      - name: Update Hugo Cards
        run: |
          python3 .github/workflows/update_cards.py .
      - name: Backup processed tools folder to posts branch
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tools folder exists and has content
          if [ -d "content/tools" ] && [ "$(ls -A content/tools 2>/dev/null)" ]; then
            # Create posts directory and copy the entire tools folder structure
            mkdir -p posts
            cp -r content/tools posts/
            
            # Check if posts branch exists, if so delete it remotely and locally
            git ls-remote --exit-code --heads origin posts-backup && git push origin --delete posts-backup || true
            git branch -D posts-backup 2>/dev/null || true
            
            # Create new orphan branch
            git checkout --orphan posts-backup
            
            # Remove all files except posts folder
            git rm -rf . || true
            
            # Add the posts folder with tools content
            git add posts/
            git commit -m "Backup processed tools folder - $(date)"
            git push origin posts-backup
            
            # Return to main branch
            git checkout main
          else
            echo "No tools folder found or tools folder is empty"
            # Still return to main branch in case we're on a different branch
            git checkout main 2>/dev/null || true
          fi
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
